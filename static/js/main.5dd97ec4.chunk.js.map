{"version":3,"sources":["Suggest.module.css","arrow.svg","remove.svg","group.svg","game.svg","Suggest.js","App.js","serviceWorker.js","index.js","friend.svg"],"names":["module","exports","container","input","inputFocused","inputOpen","suggestionsContainer","suggestionsContainerOpen","suggestionsList","suggestion","suggestionHighlighted","__webpack_require__","p","getSuggestionValue","text","renderSuggestion","query","s","slice","length","e","react_default","a","createElement","className","src","arrow","alt","shouldRenderSuggestions","Suggest","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_ref","newValue","setState","value","onSuggestionsFetchRequested","_ref2","fetch","concat","then","response","json","data","suggestions","onSuggestionsClearRequested","state","_this$state","inputProps","placeholder","dist_default","theme","alwaysRenderSuggestions","React","Component","App","src_Suggest","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,2BAAAC,MAAA,uBAAAC,aAAA,8BAAAC,UAAA,2BAAAC,qBAAA,sCAAAC,yBAAA,0CAAAC,gBAAA,iCAAAC,WAAA,4BAAAC,sBAAA,4DCDlBV,EAAAC,QAAiBU,EAAAC,EAAuB,oICAxCZ,EAAAC,QAAiBU,EAAAC,EAAuB,uDCAxCZ,EAAAC,QAAiBU,EAAAC,EAAuB,sDCAxCZ,EAAAC,QAAiBU,EAAAC,EAAuB,kNCalCC,0BAAqB,SAAAJ,GAAU,OAAIA,EAAWK,OAG9CC,EAAmB,SAACN,EAAYO,GAClC,IAAIC,EAAIR,EAAWK,KACfF,EAAIK,EAAEC,MAAM,EAAGF,EAAMA,MAAMG,QAC3BC,EAAIH,EAAEC,MAAMF,EAAMA,MAAMG,QAE5B,OACQE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAIX,GAAOQ,EACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOC,IAAI,aAM/BC,EAA0B,WAC5B,OAAO,GAkEIC,cA9DX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,SAAW,SAACC,EAADC,GAAuB,IAAdC,EAAcD,EAAdC,SAChBV,EAAKW,SAAS,CACVC,MAAOF,KAhBDV,EAsBda,4BAA8B,SAAAC,GAAa,IAAXF,EAAWE,EAAXF,MAC5BG,MAAK,wEAAAC,OAAyEJ,IACzEK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFpB,EAAKW,SAAS,CAAEU,YAAaD,OA1B3BpB,EA+BdsB,4BAA8B,WAC1BtB,EAAKW,SAAS,CAAEU,YAAa,MAxB7BrB,EAAKuB,MAAQ,CACTX,MAAO,GACPS,YAAa,IAVPrB,wEAmCL,IAAAwB,EACwBrB,KAAKoB,MAA3BX,EADFY,EACEZ,MAAOS,EADTG,EACSH,YAGRI,EAAa,CACfC,YAAa,iCACbd,QACAL,SAAUJ,KAAKI,UAInB,OACIhB,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CACI6B,YAAaA,EACbR,4BAA6BV,KAAKU,4BAClCS,4BAA6BnB,KAAKmB,4BAClCvC,mBAAoBA,EACpBe,wBAAyBA,EACzBb,iBAAkBA,EAClBwC,WAAYA,EACZG,MAAOA,IACPC,yBAAyB,WAzDnBC,IAAMC,WCpBbC,MAVf,WACE,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACwC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,kCEnInB9E,EAAAC,QAAiBU,EAAAC,EAAuB","file":"static/js/main.5dd97ec4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Suggest_container__3Bu89\",\"input\":\"Suggest_input__1liw2\",\"inputFocused\":\"Suggest_inputFocused__JrS1O\",\"inputOpen\":\"Suggest_inputOpen__3SLMX\",\"suggestionsContainer\":\"Suggest_suggestionsContainer__2E981\",\"suggestionsContainerOpen\":\"Suggest_suggestionsContainerOpen__6Z3mr\",\"suggestionsList\":\"Suggest_suggestionsList__1r9x9\",\"suggestion\":\"Suggest_suggestion__2aVii\",\"suggestionHighlighted\":\"Suggest_suggestionHighlighted__3MVO3\"};","module.exports = __webpack_public_path__ + \"static/media/arrow.a5d6bc2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.d65ee882.svg\";","module.exports = __webpack_public_path__ + \"static/media/group.0866743a.svg\";","module.exports = __webpack_public_path__ + \"static/media/game.926a407d.svg\";","import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport suggestData from './SuggestData'\nimport theme from './Suggest.module.css';\nimport arrow from './arrow.svg'\nimport remove from './remove.svg'\nimport friend from './friend.svg'\nimport group from './group.svg'\nimport game from './game.svg'\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.text;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = (suggestion, query) => {\n    let s = suggestion.text;\n    let p = s.slice(0, query.query.length);\n    let e = s.slice(query.query.length);\n\n    return (\n            <div>\n            <b>{p}</b>{e}\n            <div className=\"arrow\">\n                <img src={arrow} alt=\"arrow\"/>\n            </div>\n        </div>\n    );\n};\n\nconst shouldRenderSuggestions = () => {\n    return true;\n};\n\nclass Suggest extends React.Component {\n    constructor() {\n        super();\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    onChange = (event, {newValue}) => {\n        this.setState({\n            value: newValue\n        });\n    };\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        fetch(`http://vcdevm80.mail.msk:8080/userSuggest?userId=3845528324706&input=${value}`)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ suggestions: data })\n            })\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({ suggestions: [] });\n    };\n\n    render() {\n        const {value, suggestions} = this.state;\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Поиск',\n            value,\n            onChange: this.onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                shouldRenderSuggestions={shouldRenderSuggestions}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n                theme={theme}\n                alwaysRenderSuggestions={true}\n            />\n        );\n    }\n}\n\nexport default Suggest;","import React from 'react';\nimport './App.css';\nimport Suggest from './Suggest'\nimport friend from './friend.svg'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Suggest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/friend.b5295dad.svg\";"],"sourceRoot":""}